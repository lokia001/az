// <auto-generated />
using System;
using Backend.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250527003749_init0")]
    partial class init0
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("Backend.Api.Modules.BookingService.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ActualCheckIn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ActualCheckOut")
                        .HasColumnType("TEXT");

                    b.Property<string>("BookingCode")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("BookingStatus")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("NumPeople")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("SpaceId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SpaceId");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("Backend.Api.Modules.CommentService.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Downvotes")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ParentCommentId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PostId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Upvotes")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("PostId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Backend.Api.Modules.CommunityService.Entities.Community", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("BannerUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Community");
                });

            modelBuilder.Entity("Backend.Api.Modules.CommunityService.Entities.CommunityMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("AgreedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AgreedPolicyId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CommunityId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasAgreedToRules")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AgreedPolicyId");

                    b.HasIndex("CommunityId");

                    b.ToTable("CommunityMember");
                });

            modelBuilder.Entity("Backend.Api.Modules.CommunityService.Entities.CommunityPolicy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CommunityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId", "Version")
                        .IsUnique();

                    b.ToTable("CommunityPolicy");
                });

            modelBuilder.Entity("Backend.Api.Modules.PostService.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("CommentCount")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("CommunityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Downvotes")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Upvotes")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("Backend.Api.Modules.ReactionService.Entities.Reaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CommentId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("TEXT");

                    b.Property<int>("ReactionType")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("PostId");

                    b.ToTable("Reaction");
                });

            modelBuilder.Entity("Backend.Api.Modules.ReportService.Entities.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomReason")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("Reason")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ReportedCommentId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ReportedCommunityId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ReportedPostId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ReportedSpaceId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ReportedUserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ReporterUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResolutionNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ReviewedByUserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ReportedCommentId");

                    b.HasIndex("ReportedCommunityId");

                    b.HasIndex("ReportedPostId");

                    b.HasIndex("ReportedSpaceId");

                    b.ToTable("Report");
                });

            modelBuilder.Entity("Backend.Api.Modules.ServiceService.Entities.ServiceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAvailableAdHoc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsPricedPerBooking")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ServiceEntity");
                });

            modelBuilder.Entity("Backend.Api.Modules.SpaceService.Entities.Amenity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Amenity");
                });

            modelBuilder.Entity("Backend.Api.Modules.SpaceService.Entities.ServiceSpace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsIncludedInBasePrice")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("PriceOverride")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SpaceId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("SpaceId");

                    b.ToTable("ServicesSpaces", (string)null);
                });

            modelBuilder.Entity("Backend.Api.Modules.SpaceService.Entities.Space", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BufferMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CancellationNoticeHours")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Capacity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CleaningDurationMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan?>("CloseTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("DailyPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("HourlyPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("LastEditedByUserId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxBookingDurationMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinBookingDurationMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("OpenTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OwnerProfileId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Space");
                });

            modelBuilder.Entity("Backend.Api.Modules.SpaceService.Entities.SpaceAmenity", b =>
                {
                    b.Property<Guid>("SpaceAmenityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AmenityId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SpaceId")
                        .HasColumnType("TEXT");

                    b.HasKey("SpaceAmenityId");

                    b.HasIndex("AmenityId");

                    b.HasIndex("SpaceId", "AmenityId")
                        .IsUnique();

                    b.ToTable("SpaceAmenity");
                });

            modelBuilder.Entity("Backend.Api.Modules.SpaceService.Entities.SpaceImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SpaceId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SpaceId");

                    b.ToTable("SpaceImages", (string)null);
                });

            modelBuilder.Entity("Backend.Api.Modules.UserRelated.Domain.Entities.OwnerProfile", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("BusinessLicenseNumber")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactInfo")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(512)
                        .HasColumnType("TEXT");

                    b.Property<string>("TaxCode")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("OwnerProfiles", "user_related");
                });

            modelBuilder.Entity("Backend.Api.Modules.UserRelated.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(512)
                        .HasColumnType("TEXT");

                    b.Property<string>("Bio")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordResetToken")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PasswordResetTokenExpiry")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users", "user_related");
                });

            modelBuilder.Entity("Backend.Api.Modules.BookingService.Entities.Booking", b =>
                {
                    b.HasOne("Backend.Api.Modules.SpaceService.Entities.Space", "Space")
                        .WithMany("Bookings")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Space");
                });

            modelBuilder.Entity("Backend.Api.Modules.CommentService.Entities.Comment", b =>
                {
                    b.HasOne("Backend.Api.Modules.CommentService.Entities.Comment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId");

                    b.HasOne("Backend.Api.Modules.PostService.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentComment");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Backend.Api.Modules.CommunityService.Entities.CommunityMember", b =>
                {
                    b.HasOne("Backend.Api.Modules.CommunityService.Entities.CommunityPolicy", "AgreedPolicy")
                        .WithMany("MembershipsAgreedToThisPolicy")
                        .HasForeignKey("AgreedPolicyId");

                    b.HasOne("Backend.Api.Modules.CommunityService.Entities.Community", "Community")
                        .WithMany("CommunityMembers")
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AgreedPolicy");

                    b.Navigation("Community");
                });

            modelBuilder.Entity("Backend.Api.Modules.CommunityService.Entities.CommunityPolicy", b =>
                {
                    b.HasOne("Backend.Api.Modules.CommunityService.Entities.Community", "Community")
                        .WithMany("Policies")
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Community");
                });

            modelBuilder.Entity("Backend.Api.Modules.PostService.Entities.Post", b =>
                {
                    b.HasOne("Backend.Api.Modules.CommunityService.Entities.Community", "Community")
                        .WithMany("Posts")
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Community");
                });

            modelBuilder.Entity("Backend.Api.Modules.ReactionService.Entities.Reaction", b =>
                {
                    b.HasOne("Backend.Api.Modules.CommentService.Entities.Comment", "Comment")
                        .WithMany("Reactions")
                        .HasForeignKey("CommentId");

                    b.HasOne("Backend.Api.Modules.PostService.Entities.Post", "Post")
                        .WithMany("Reactions")
                        .HasForeignKey("PostId");

                    b.Navigation("Comment");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Backend.Api.Modules.ReportService.Entities.Report", b =>
                {
                    b.HasOne("Backend.Api.Modules.CommentService.Entities.Comment", "ReportedComment")
                        .WithMany("ReportsOnThisComment")
                        .HasForeignKey("ReportedCommentId");

                    b.HasOne("Backend.Api.Modules.CommunityService.Entities.Community", "ReportedCommunity")
                        .WithMany("ReportsOnThisCommunity")
                        .HasForeignKey("ReportedCommunityId");

                    b.HasOne("Backend.Api.Modules.PostService.Entities.Post", "ReportedPost")
                        .WithMany("ReportsOnThisPost")
                        .HasForeignKey("ReportedPostId");

                    b.HasOne("Backend.Api.Modules.SpaceService.Entities.Space", "ReportedSpace")
                        .WithMany()
                        .HasForeignKey("ReportedSpaceId");

                    b.Navigation("ReportedComment");

                    b.Navigation("ReportedCommunity");

                    b.Navigation("ReportedPost");

                    b.Navigation("ReportedSpace");
                });

            modelBuilder.Entity("Backend.Api.Modules.SpaceService.Entities.ServiceSpace", b =>
                {
                    b.HasOne("Backend.Api.Modules.ServiceService.Entities.ServiceEntity", "Service")
                        .WithMany("ServiceSpaces")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Api.Modules.SpaceService.Entities.Space", "Space")
                        .WithMany("ServiceSpaces")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("Space");
                });

            modelBuilder.Entity("Backend.Api.Modules.SpaceService.Entities.SpaceAmenity", b =>
                {
                    b.HasOne("Backend.Api.Modules.SpaceService.Entities.Amenity", "Amenity")
                        .WithMany("SpaceAmenities")
                        .HasForeignKey("AmenityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Api.Modules.SpaceService.Entities.Space", "Space")
                        .WithMany("SpaceAmenities")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Amenity");

                    b.Navigation("Space");
                });

            modelBuilder.Entity("Backend.Api.Modules.SpaceService.Entities.SpaceImage", b =>
                {
                    b.HasOne("Backend.Api.Modules.SpaceService.Entities.Space", "Space")
                        .WithMany("SpaceImages")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Space");
                });

            modelBuilder.Entity("Backend.Api.Modules.UserRelated.Domain.Entities.OwnerProfile", b =>
                {
                    b.HasOne("Backend.Api.Modules.UserRelated.Domain.Entities.User", "User")
                        .WithOne("OwnerProfile")
                        .HasForeignKey("Backend.Api.Modules.UserRelated.Domain.Entities.OwnerProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Api.Modules.CommentService.Entities.Comment", b =>
                {
                    b.Navigation("Reactions");

                    b.Navigation("Replies");

                    b.Navigation("ReportsOnThisComment");
                });

            modelBuilder.Entity("Backend.Api.Modules.CommunityService.Entities.Community", b =>
                {
                    b.Navigation("CommunityMembers");

                    b.Navigation("Policies");

                    b.Navigation("Posts");

                    b.Navigation("ReportsOnThisCommunity");
                });

            modelBuilder.Entity("Backend.Api.Modules.CommunityService.Entities.CommunityPolicy", b =>
                {
                    b.Navigation("MembershipsAgreedToThisPolicy");
                });

            modelBuilder.Entity("Backend.Api.Modules.PostService.Entities.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Reactions");

                    b.Navigation("ReportsOnThisPost");
                });

            modelBuilder.Entity("Backend.Api.Modules.ServiceService.Entities.ServiceEntity", b =>
                {
                    b.Navigation("ServiceSpaces");
                });

            modelBuilder.Entity("Backend.Api.Modules.SpaceService.Entities.Amenity", b =>
                {
                    b.Navigation("SpaceAmenities");
                });

            modelBuilder.Entity("Backend.Api.Modules.SpaceService.Entities.Space", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("ServiceSpaces");

                    b.Navigation("SpaceAmenities");

                    b.Navigation("SpaceImages");
                });

            modelBuilder.Entity("Backend.Api.Modules.UserRelated.Domain.Entities.User", b =>
                {
                    b.Navigation("OwnerProfile");
                });
#pragma warning restore 612, 618
        }
    }
}
