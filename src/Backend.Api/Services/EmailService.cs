// Backend.Api/Services/Shared/EmailService.cs
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Configuration; // Cho IConfiguration
using System.Threading.Tasks;
using MailKit.Net.Smtp;
using MailKit.Security; // Cho SecureSocketOptions
using MimeKit;
using MimeKit.Text; // Cho TextFormat
using System; // Cho ArgumentNullException

namespace Backend.Api.Services.Shared
{
    public class EmailService : IEmailService
    {
        private readonly ILogger<EmailService> _logger;
        private readonly IConfiguration _configuration;
        private readonly string _smtpPassword; // Bi·∫øn ƒë·ªÉ l∆∞u m·∫≠t kh·∫©u t·ª´ bi·∫øn m√¥i tr∆∞·ªùng

        public EmailService(ILogger<EmailService> logger, IConfiguration configuration)
        {
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
            _configuration = configuration ?? throw new ArgumentNullException(nameof(configuration));

            // L·∫•y m·∫≠t kh·∫©u t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
            _smtpPassword = _configuration["SmtpSettings:Password"]; // << S·ª¨A ·ªû ƒê√ÇY
            // _smtpPassword = Environment.GetEnvironmentVariable("SMTP_PASSWORD_HAHUU3675");
            if (string.IsNullOrEmpty(_smtpPassword))
            {
                _logger.LogError("SMTP_PASSWORD_HAHUU3675 environment variable is not set.");
                // Quy·∫øt ƒë·ªãnh c√°ch x·ª≠ l√Ω: throw exception, ho·∫∑c ƒë·ªÉ app ch·∫°y nh∆∞ng kh√¥ng g·ª≠i ƒë∆∞·ª£c mail
                // throw new InvalidOperationException("SMTP password environment variable is not configured.");
            }
            else
            {
                _logger.LogInformation("SMTP_PASSWORD_HAHUU3675 environment variable was loaded (length: {Length}). First few chars: {Start}", _smtpPassword.Length, _smtpPassword.Substring(0, Math.Min(_smtpPassword.Length, 3)) + "..."); // Log m·ªôt ph·∫ßn ƒë·ªÉ x√°c nh·∫≠n n√≥ c√≥ gi√° tr·ªã
            }
        }

        public async Task SendPasswordResetEmailAsync(string toEmail, string recipientName, string resetLink)
        {
            var smtpSettings = _configuration.GetSection("SmtpSettings");
            var smtpHost = smtpSettings["Host"];
            var smtpPort = int.Parse(smtpSettings["Port"] ?? "587"); // M·∫∑c ƒë·ªãnh port 587
            var smtpUsername = smtpSettings["Username"]; // Username t·ª´ config (hahuu3675@gmail.com)
            var senderName = smtpSettings["SenderName"] ?? "WorkingAdmin";

            _logger.LogInformation("==>> SMTP Config - Host: {SmtpHost}, Port: {SmtpPort}, Username: {SmtpUsername}, SenderName: {SenderName}", smtpHost, smtpPort, smtpUsername, senderName);

            if (string.IsNullOrEmpty(smtpHost) || string.IsNullOrEmpty(smtpUsername) || string.IsNullOrEmpty(_smtpPassword))
            {
                _logger.LogError("SMTP settings (Host, Username, or Password from Env) are not fully configured. Cannot send email.");
                // Kh√¥ng throw l·ªói ·ªü ƒë√¢y ƒë·ªÉ kh√¥ng l√†m s·∫≠p flow forgot password, nh∆∞ng email s·∫Ω kh√¥ng ƒë∆∞·ª£c g·ª≠i.
                // Ng∆∞·ªùi d√πng v·∫´n nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o "N·∫øu email t·ªìn t·∫°i..."
                return;
            }

            try
            {
                var emailMessage = new MimeMessage();
                emailMessage.From.Add(new MailboxAddress(senderName, smtpUsername));
                emailMessage.To.Add(new MailboxAddress(recipientName, toEmail));
                emailMessage.Subject = "Password Reset Request";

                // T·∫°o n·ªôi dung email HTML
                var bodyBuilder = new BodyBuilder
                {
                    HtmlBody = $@"
                        <p>Hello {recipientName},</p>
                        <p>We received a request to reset your password for your account with Your Application Name. If you did not make this request, please ignore this email.</p>
                        <p>To reset your password, please click on the link below (or copy and paste it into your browser):</p>
                        <p><a href=""{resetLink}"" style=""display: inline-block; padding: 10px 20px; font-size: 16px; color: #ffffff; background-color: #007bff; text-decoration: none; border-radius: 5px;"">Reset Your Password</a></p>
                        <p>This link is valid for a limited time (e.g., 30 minutes).</p>
                        <p>If you‚Äôre having trouble clicking the password reset button, copy and paste the URL below into your web browser:<br>{resetLink}</p>
                        <p>Thanks,<br/>The Your Application Name Team</p>"
                };
                emailMessage.Body = bodyBuilder.ToMessageBody();

                using (var client = new SmtpClient())
                {
                    // ƒê·ªëi v·ªõi Gmail, th∆∞·ªùng d√πng StartTls tr√™n port 587
                    // Ho·∫∑c SslOnConnect tr√™n port 465
                    await client.ConnectAsync(smtpHost, smtpPort, SecureSocketOptions.StartTls); // Ho·∫∑c SecureSocketOptions.Auto n·∫øu server h·ªó tr·ª£
                    _logger.LogInformation("Connected to SMTP server: {SmtpHost}:{SmtpPort}", smtpHost, smtpPort);

                    // S·ª≠ d·ª•ng username t·ª´ config v√† password t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
                    await client.AuthenticateAsync(smtpUsername, _smtpPassword);
                    _logger.LogInformation("Authenticated with SMTP server using username: {SmtpUsername}", smtpUsername);

                    await client.SendAsync(emailMessage);
                    _logger.LogInformation("Password reset email successfully sent to {ToEmail}", toEmail);

                    await client.DisconnectAsync(true);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to send password reset email to {ToEmail}. SMTP Host: {SmtpHost}, Port: {SmtpPort}, Username: {SmtpUsername}",
                                 toEmail, smtpHost, smtpPort, smtpUsername);
                // Kh√¥ng throw l·ªói ra ngo√†i ƒë·ªÉ flow "Forgot Password" v·∫´n tr·∫£ v·ªÅ th√¥ng b√°o chung cho ng∆∞·ªùi d√πng.
                // L·ªói g·ª≠i email s·∫Ω ƒë∆∞·ª£c ghi l·∫°i ƒë·ªÉ admin ki·ªÉm tra.
            }
        }

        public async Task SendBookingConfirmationEmailAsync(string toEmail, string customerName, string spaceName, 
            string startTime, string endTime, string checkInTime, string ownerEmail, string bookingCode)
        {
            var smtpSettings = _configuration.GetSection("SmtpSettings");
            var smtpHost = smtpSettings["Host"];
            var smtpPort = int.Parse(smtpSettings["Port"] ?? "587");
            var smtpUsername = smtpSettings["Username"];
            var senderName = smtpSettings["SenderName"] ?? "Working Space Booking";

            _logger.LogInformation("Sending booking confirmation email to {ToEmail} for booking {BookingCode}", toEmail, bookingCode);

            if (string.IsNullOrEmpty(smtpHost) || string.IsNullOrEmpty(smtpUsername) || string.IsNullOrEmpty(_smtpPassword))
            {
                _logger.LogError("SMTP settings are not fully configured. Cannot send booking confirmation email.");
                return;
            }

            try
            {
                var emailMessage = new MimeMessage();
                emailMessage.From.Add(new MailboxAddress(senderName, smtpUsername));
                emailMessage.To.Add(new MailboxAddress(customerName, toEmail));
                emailMessage.Subject = $"X√°c nh·∫≠n ƒë·∫∑t ch·ªó - {bookingCode}";

                var bodyBuilder = new BodyBuilder
                {
                    HtmlBody = $@"
                        <div style=""font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;"">
                            <h2 style=""color: #28a745;"">üéâ Booking c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n!</h2>
                            
                            <p>Xin ch√†o <strong>{customerName}</strong>,</p>
                            
                            <p>Ch√∫ng t√¥i vui m·ª´ng th√¥ng b√°o r·∫±ng booking c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ch·ªß kh√¥ng gian x√°c nh·∫≠n.</p>
                            
                            <div style=""background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;"">
                                <h3 style=""margin-top: 0; color: #495057;"">üìã Th√¥ng tin booking</h3>
                                <p><strong>M√£ booking:</strong> {bookingCode}</p>
                                <p><strong>Kh√¥ng gian:</strong> {spaceName}</p>
                                <p><strong>Th·ªùi gian:</strong> {startTime} - {endTime}</p>
                                <p><strong>‚è∞ Gi·ªù check-in:</strong> <span style=""color: #dc3545; font-weight: bold;"">{checkInTime}</span></p>
                            </div>
                            
                            <div style=""background-color: #e7f3ff; padding: 15px; border-radius: 8px; border-left: 4px solid #007bff;"">
                                <h4 style=""margin-top: 0; color: #007bff;"">üìû Li√™n h·ªá h·ªó tr·ª£</h4>
                                <p>N·∫øu b·∫°n c√≥ th·∫Øc m·∫Øc ho·∫∑c c·∫ßn h·ªó tr·ª£, vui l√≤ng li√™n h·ªá tr·ª±c ti·∫øp v·ªõi ch·ªß kh√¥ng gian:</p>
                                <p><strong>Email:</strong> <a href=""mailto:{ownerEmail}"">{ownerEmail}</a></p>
                            </div>
                            
                            <div style=""margin-top: 30px; padding-top: 20px; border-top: 1px solid #dee2e6;"">
                                <p style=""color: #6c757d; font-size: 14px;"">
                                    üìå <strong>L∆∞u √Ω:</strong> Vui l√≤ng ƒë·∫øn ƒë√∫ng gi·ªù check-in v√† mang theo gi·∫•y t·ªù t√πy th√¢n n·∫øu c·∫ßn thi·∫øt.
                                </p>
                                <p style=""color: #6c757d; font-size: 14px;"">
                                    C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i!
                                </p>
                            </div>
                        </div>"
                };
                emailMessage.Body = bodyBuilder.ToMessageBody();

                using (var client = new SmtpClient())
                {
                    await client.ConnectAsync(smtpHost, smtpPort, SecureSocketOptions.StartTls);
                    await client.AuthenticateAsync(smtpUsername, _smtpPassword);
                    await client.SendAsync(emailMessage);
                    await client.DisconnectAsync(true);
                    
                    _logger.LogInformation("Booking confirmation email successfully sent to {ToEmail} for booking {BookingCode}", toEmail, bookingCode);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to send booking confirmation email to {ToEmail} for booking {BookingCode}", toEmail, bookingCode);
            }
        }
        
        public async Task SendBookingCancellationEmailAsync(string toEmail, string customerName, string spaceName,
            string startTime, string endTime, string cancellationReason, string ownerEmail, string bookingCode, string? timeline = null)
        {
            var smtpSettings = _configuration.GetSection("SmtpSettings");
            var smtpHost = smtpSettings["Host"];
            var smtpPort = int.Parse(smtpSettings["Port"] ?? "587");
            var smtpUsername = smtpSettings["Username"];
            var senderName = smtpSettings["SenderName"] ?? "Working Space Booking";

            _logger.LogInformation("Sending booking cancellation email to {ToEmail} for booking {BookingCode}", toEmail, bookingCode);

            if (string.IsNullOrEmpty(smtpHost) || string.IsNullOrEmpty(smtpUsername) || string.IsNullOrEmpty(_smtpPassword))
            {
                _logger.LogError("SMTP settings are not fully configured. Cannot send booking cancellation email.");
                return;
            }

            try
            {
                var emailMessage = new MimeMessage();
                emailMessage.From.Add(new MailboxAddress(senderName, smtpUsername));
                emailMessage.To.Add(new MailboxAddress(customerName, toEmail));
                emailMessage.Subject = $"Th√¥ng b√°o h·ªßy booking - {bookingCode}";

                // Create timeline HTML if provided
                var timelineHtml = "";
                if (!string.IsNullOrEmpty(timeline))
                {
                    timelineHtml = $@"
                        <div style=""background-color: #f8f9fa; padding: 15px; border-radius: 8px; margin: 20px 0;"">
                            <h4 style=""margin-top: 0; color: #495057;"">üìÖ L·ªãch tr√¨nh th·ªùi gian (gi·ªù Vi·ªát Nam, 24h)</h4>
                            <div style=""font-family: monospace; font-size: 14px; line-height: 1.5;"">
                                {timeline}
                            </div>
                            <p style=""font-size: 12px; color: #6c757d; margin-top: 10px;"">
                                <span style=""color: #28a745;"">‚óè Xanh:</span> Th·ªùi gian c√≥ th·ªÉ ƒë·∫∑t &nbsp;&nbsp;
                                <span style=""color: #dc3545;"">‚óè ƒê·ªè:</span> Th·ªùi gian ƒë√£ c√≥ booking kh√°c
                            </p>
                        </div>";
                }

                var bodyBuilder = new BodyBuilder
                {
                    HtmlBody = $@"
                        <div style=""font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;"">
                            <h2 style=""color: #dc3545;"">‚ùå Booking c·ªßa b·∫°n ƒë√£ b·ªã h·ªßy</h2>
                            
                            <p>Xin ch√†o <strong>{customerName}</strong>,</p>
                            
                            <p>Ch√∫ng t√¥i r·∫•t ti·∫øc ph·∫£i th√¥ng b√°o r·∫±ng booking c·ªßa b·∫°n ƒë√£ b·ªã h·ªßy do xung ƒë·ªôt th·ªùi gian.</p>
                            
                            <div style=""background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;"">
                                <h3 style=""margin-top: 0; color: #495057;"">üìã Th√¥ng tin booking ƒë√£ h·ªßy</h3>
                                <p><strong>M√£ booking:</strong> {bookingCode}</p>
                                <p><strong>Kh√¥ng gian:</strong> {spaceName}</p>
                                <p><strong>Th·ªùi gian:</strong> {startTime} - {endTime}</p>
                                <p><strong>L√Ω do h·ªßy:</strong> <span style=""color: #dc3545;"">{cancellationReason}</span></p>
                            </div>
                            
                            {timelineHtml}
                            
                            <div style=""background-color: #fff3cd; padding: 15px; border-radius: 8px; border-left: 4px solid #ffc107;"">
                                <h4 style=""margin-top: 0; color: #856404;"">üí° L√†m th·∫ø n√†o ƒë·ªÉ tr√°nh xung ƒë·ªôt?</h4>
                                <p>Xung ƒë·ªôt th·ªùi gian x·∫£y ra khi c√≥ nhi·ªÅu booking ƒë∆∞·ª£c t·∫°o c√πng l√∫c cho c√πng m·ªôt th·ªùi ƒëi·ªÉm. Ch·ªß kh√¥ng gian s·∫Ω x√°c nh·∫≠n booking ƒë·∫ßu ti√™n v√† c√°c booking c√≤n l·∫°i s·∫Ω t·ª± ƒë·ªông b·ªã h·ªßy.</p>
                                <p><strong>G·ª£i √Ω:</strong> H√£y th·ª≠ ƒë·∫∑t l·∫°i v·ªõi th·ªùi gian kh√°c ho·∫∑c li√™n h·ªá tr·ª±c ti·∫øp v·ªõi ch·ªß kh√¥ng gian.</p>
                            </div>
                            
                            <div style=""background-color: #e7f3ff; padding: 15px; border-radius: 8px; border-left: 4px solid #007bff;"">
                                <h4 style=""margin-top: 0; color: #007bff;"">üìû Li√™n h·ªá h·ªó tr·ª£</h4>
                                <p>N·∫øu b·∫°n c√≥ th·∫Øc m·∫Øc ho·∫∑c c·∫ßn h·ªó tr·ª£ ƒë·∫∑t l·∫°i booking, vui l√≤ng li√™n h·ªá tr·ª±c ti·∫øp v·ªõi ch·ªß kh√¥ng gian:</p>
                                <p><strong>Email:</strong> <a href=""mailto:{ownerEmail}"">{ownerEmail}</a></p>
                            </div>
                            
                            <div style=""margin-top: 30px; padding-top: 20px; border-top: 1px solid #dee2e6;"">
                                <p style=""color: #6c757d; font-size: 14px;"">
                                    Ch√∫ng t√¥i r·∫•t xin l·ªói v√¨ s·ª± b·∫•t ti·ªán n√†y v√† hy v·ªçng ƒë∆∞·ª£c ph·ª•c v·ª• b·∫°n trong t∆∞∆°ng lai.
                                </p>
                            </div>
                        </div>"
                };
                emailMessage.Body = bodyBuilder.ToMessageBody();

                using (var client = new SmtpClient())
                {
                    await client.ConnectAsync(smtpHost, smtpPort, SecureSocketOptions.StartTls);
                    await client.AuthenticateAsync(smtpUsername, _smtpPassword);
                    await client.SendAsync(emailMessage);
                    await client.DisconnectAsync(true);
                    
                    _logger.LogInformation("Booking cancellation email successfully sent to {ToEmail} for booking {BookingCode}", toEmail, bookingCode);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to send booking cancellation email to {ToEmail} for booking {BookingCode}", toEmail, bookingCode);
            }
        }
    }
}