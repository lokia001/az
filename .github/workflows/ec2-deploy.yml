name: Auto Deploy to EC2 on Push to Main

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: ✅ Checkout code
      uses: actions/checkout@v3

    # ----------- FRONTEND ----------
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '22'

    - name: 📦 Install & Build Frontend
      run: |
        cd Frontend # << THAY ĐỔI: Đường dẫn tới thư mục frontend của bạn (Frontendtest)
        npm install
        npm run build
        ls -la dist

    # ----------- BACKEND -----------
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.x'

    - name: 🔧 Install EF Core CLI Tools
      run: dotnet tool install --global dotnet-ef

    - name: 📋 Prepare Database Migration Solution
      run: |
        cd src/Backend.Api # Đường dẫn tới Backend.Api của bạn
        echo "🔍 Checking existing migrations..."
        dotnet ef migrations list
        
        echo "📝 Creating migration script for SQLite..."
        # Tạo script migration không idempotent (SQLite không hỗ trợ idempotent)
        dotnet ef migrations script --output sql_migrations.sql || echo "No migrations needed or error occurred"
        
        if [ -f sql_migrations.sql ]; then
          echo "✅ Migration script created successfully"
          # Thêm transaction vào script để đảm bảo tính nguyên vẹn
          sed -i '1i BEGIN TRANSACTION;' sql_migrations.sql
          echo "COMMIT;" >> sql_migrations.sql
          
          # Hiển thị preview script
          echo "📋 Preview of migration script:"
          cat sql_migrations.sql | head -n 20
          echo "..."
          wc -l sql_migrations.sql | awk '{print "Total lines in migration script:", $1}'
        else
          echo "⚠️ No migration script generated - no pending migrations or error occurred" 
          # Tạo file rỗng để tiếp tục workflow
          echo "-- No migrations to apply" > sql_migrations.sql
        fi

    - name: 📦 Publish Backend
      run: dotnet publish -c Release -o publish
      working-directory: src/Backend.Api # << THAY ĐỔI: Đường dẫn tới Backend.Api của bạn (src/Backend.Api)


 # ----------- PREPARE SERVER (Optional, if needed for first time or permissions) -----------
    - name: 📦 Prepare Database Directory on EC2
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.EC2_IP }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          DB_DIR="/var/app_data/my_backend_db" # Đường dẫn database giống file cũ
          APP_USER="${{ secrets.EC2_USER }}"

          echo "Ensuring database directory $DB_DIR exists..."
          sudo mkdir -p $DB_DIR
          echo "Setting ownership of $DB_DIR to $APP_USER..."
          sudo chown -R $APP_USER:$APP_USER $DB_DIR
          sudo chmod -R 700 $DB_DIR
          echo "Database directory prepared."


    # ----------- CLEAN REMOTE FOLDERS -----------
    - name: 🧹 Clean remote frontend folder
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.EC2_IP }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          sudo rm -rf /var/www/html/*
          sudo mkdir -p /var/www/html
          sudo chown -R ${{ secrets.EC2_USER }}:${{ secrets.EC2_USER }} /var/www/html

    - name: 🧹 Clean remote backend folder
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.EC2_IP }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          sudo rm -rf /home/${{ secrets.EC2_USER }}/app/backend/* # << THAY ĐỔI: Đường dẫn backend trên EC2
          sudo mkdir -p /home/${{ secrets.EC2_USER }}/app/backend
          sudo chown -R ${{ secrets.EC2_USER }}:${{ secrets.EC2_USER }} /home/${{ secrets.EC2_USER }}/app/backend

    # ---------- UPLOAD FRONTEND ----------
    - name: 📤 Upload Frontend to EC2 (~/webclient)
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.EC2_IP }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "./Frontend/dist" # Đường dẫn mới tới thư mục dist của frontend
        target: "/home/${{ secrets.EC2_USER }}/webclient/"
        debug: true

    - name: 🚚 Move Frontend to Nginx folder
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.EC2_IP }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          sudo rm -rf /var/www/html/*
          sudo mv /home/${{ secrets.EC2_USER }}/webclient/Frontend/dist/* /var/www/html/ # Đường dẫn mới dist
          sudo chown -R www-data:www-data /var/www/html
          sudo chmod -R 755 /var/www/html

    # ---------- UPLOAD NGINX CONFIG ----------
    # - name: 📤 Upload Nginx Configuration
    #   uses: appleboy/scp-action@v0.1.4
    #   with:
    #     host: ${{ secrets.EC2_IP }}
    #     username: ${{ secrets.EC2_USER }}
    #     key: ${{ secrets.SSH_PRIVATE_KEY }}
    #     source: "./nginx/working.conf"
    #     target: "/home/${{ secrets.EC2_USER }}/app/"
    #     overwrite: true

    # ---------- UPLOAD BACKEND ----------
    - name: 🚀 Upload Backend to EC2
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.EC2_IP }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: src/Backend.Api/publish/ # Đường dẫn mới tới thư mục publish của backend
        target: /home/${{ secrets.EC2_USER }}/app/backend/
        overwrite: true
        
    # Tạo file rỗng nếu không tồn tại để tránh lỗi trong bước upload
    - name: 🔍 Ensure migration script exists
      run: |
        if [ ! -f "src/Backend.Api/sql_migrations.sql" ]; then
          echo "⚠️ Migration script not found, creating empty file"
          echo "-- No migrations to apply" > src/Backend.Api/sql_migrations.sql
        else
          echo "✅ Migration script found"
          cat src/Backend.Api/sql_migrations.sql | head -n 5
        fi
        
    # Upload SQL migration script with verbose options
    - name: 📤 Upload SQL Migration Script
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.EC2_IP }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: src/Backend.Api/sql_migrations.sql
        target: /home/${{ secrets.EC2_USER }}/app/
        overwrite: true
        debug: true
        strip_components: 2

    # Thêm bước áp dụng migration script
    - name: 🔄 Apply Database Migrations 
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.EC2_IP }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          echo "📝 Creating database backup before migrations..."
          BACKUP_FILE="/var/app_data/backup_$(date +%Y%m%d_%H%M%S).db"
          CONNECTION_STRING="${{ secrets.PROD_DB_CONNECTION_STRING }}"
          DB_PATH=$(echo $CONNECTION_STRING | sed -n 's/.*Data Source=\([^;]*\).*/\1/p')
          
          if [ -f "$DB_PATH" ]; then
            echo "Backing up database from $DB_PATH to $BACKUP_FILE"
            cp "$DB_PATH" "$BACKUP_FILE"
          else
            echo "⚠️ Warning: Database file not found at $DB_PATH, skipping backup"
          fi
          
          echo "🔄 Applying database migrations..."
          # Khởi tạo các biến môi trường cần thiết
          export ConnectionStrings__DefaultConnection="${{ secrets.PROD_DB_CONNECTION_STRING }}"
          
          # Kiểm tra kết nối
          if [ -f "$DB_PATH" ]; then
            echo "✅ Database file exists at $DB_PATH"
          else
            echo "⚠️ Database file not found, will be created by migration"
          fi
          
          # Kiểm tra xem file migration đã được upload chưa
          echo "📋 Checking for migration script..."
          MIGRATION_FILE="/home/${{ secrets.EC2_USER }}/app/sql_migrations.sql"
          
          if [ ! -f "$MIGRATION_FILE" ]; then
            echo "❌ Migration script not found at $MIGRATION_FILE"
            echo "Listing directory content to debug:"
            ls -la /home/${{ secrets.EC2_USER }}/app/
            echo "Creating empty migration file..."
            echo "-- No migrations to apply" > $MIGRATION_FILE
          fi
          
          # Áp dụng script SQL
          echo "📋 Applying SQL migration script..."
          cp $MIGRATION_FILE /tmp/migration.sql
          chmod 644 /tmp/migration.sql  # Ensure file is readable
          
          # Kiểm tra nội dung script trước khi áp dụng
          echo "Content of migration script:"
          cat /tmp/migration.sql | head -n 10
          MIGRATION_CONTENT=$(cat /tmp/migration.sql)
          if [[ "$MIGRATION_CONTENT" == *"No migrations to apply"* ]]; then
            echo "✅ No migrations to apply, skipping..."
          else
            # Cài đặt sqlite3 nếu chưa có
            if ! command -v sqlite3 &> /dev/null; then
              echo "Installing sqlite3..."
              sudo apt-get update && sudo apt-get install -y sqlite3
            fi
            
            # Sử dụng SQLite CLI để áp dụng migrations
            SQLITE_DB=$DB_PATH
            echo "Running migrations on $SQLITE_DB"
            
            # Chạy script và kiểm tra lỗi
            echo "Executing migration script..."
            if [ -s "/tmp/migration.sql" ]; then
              # Kiểm tra lại file có sẵn sàng không
              ls -la /tmp/migration.sql
              
              # Chạy từng câu lệnh SQL thay vì dùng input redirection
              echo ".read /tmp/migration.sql" | sqlite3 "$SQLITE_DB"
              
              if [ $? -eq 0 ]; then
                echo "✅ Database migration completed successfully!"
              else
                echo "❌ Migration failed with error code $?"
                echo "Migration script content:"
                cat /tmp/migration.sql
                echo "Rolling back to backup..."
                
                if [ -f "$BACKUP_FILE" ]; then
                  cp "$BACKUP_FILE" "$DB_PATH"
                  echo "✅ Restored from backup: $BACKUP_FILE"
                else
                  echo "⚠️ No backup available for restore!"
                fi
                
                # Chuyển qua phương án thay thế thay vì exit
                echo "Trying alternative approach..."
              fi
            else
              echo "⚠️ Migration script is empty or not readable"
              echo "Trying alternative approach..."
            fi
          fi
          
          if [ $? -eq 0 ]; then
            echo "✅ Database migrations applied successfully!"
          else
            echo "❌ Failed to apply migrations using SQL script!"
            echo "Trying alternative approach with dotnet ef database update..."
            
            echo "Attempting to apply migrations directly with dotnet ef..."
            
            # Di chuyển đến thư mục backend
            cd /home/${{ secrets.EC2_USER }}/app/backend/publish
            
            # Cài đặt dotnet ef tools nếu chưa có
            if ! command -v dotnet-ef &> /dev/null; then
              echo "Installing dotnet-ef tools..."
              dotnet tool install --global dotnet-ef || true
              export PATH="$PATH:$HOME/.dotnet/tools"
            fi
            
            # Cấu hình môi trường
            export ConnectionStrings__DefaultConnection="${{ secrets.PROD_DB_CONNECTION_STRING }}"
            export ASPNETCORE_ENVIRONMENT="Production"
            
            # Kiểm tra migrations có sẵn
            echo "Listing available migrations:"
            dotnet ef migrations list || echo "Could not list migrations"
            
            # Chạy database update
            echo "Running database update..."
            if dotnet ef database update; then
              echo "✅ Database migration completed successfully using dotnet ef database update!"
            else
              echo "❌ Migration failed with both approaches"
              
              if [ -f "$BACKUP_FILE" ]; then
                echo "Restoring from backup..."
                cp "$BACKUP_FILE" "$DB_PATH"
                echo "✅ Restored from backup: $BACKUP_FILE"
                
                # Không exit, cho phép ứng dụng chạy với database cũ
                echo "⚠️ Application will continue with the previous database version"
              else
                echo "⚠️ No backup available for restore! Application may not work correctly."
              fi
            fi
          fi

# ---------- SSH & RESTART ----------
    - name: ⚙️ Configure Backend Environment and Restart Service
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.EC2_IP }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          echo "Updating systemd service environment variables for backend..."

          # Định nghĩa tên service và đường dẫn đến thư mục drop-in
          SERVICE_NAME="xyz-backend.service" # << THAY ĐỔI: Tên service của bạn
          OVERRIDE_DIR="/etc/systemd/system/${SERVICE_NAME}.d"
          OVERRIDE_FILE="$OVERRIDE_DIR/99-app-secrets.conf"

          # Tạo thư mục drop-in nếu chưa tồn tại
          sudo mkdir -p $OVERRIDE_DIR

          # Tạo hoặc ghi đè file drop-in với các biến môi trường mới
          echo "[Service]" | sudo tee $OVERRIDE_FILE > /dev/null
          echo "Environment=\"ASPNETCORE_ENVIRONMENT=Production\"" | sudo tee -a $OVERRIDE_FILE > /dev/null
          
          # Database Connection
          echo "Environment=\"ConnectionStrings__DefaultConnection=${{ secrets.PROD_DB_CONNECTION_STRING }}\"" | sudo tee -a $OVERRIDE_FILE > /dev/null
          
          # JWT Configuration
          echo "Environment=\"Jwt__Key=${{ secrets.PROD_JWT_KEY }}\"" | sudo tee -a $OVERRIDE_FILE > /dev/null
          echo "Environment=\"Jwt__Issuer=${{ secrets.PROD_JWT_ISSUER }}\"" | sudo tee -a $OVERRIDE_FILE > /dev/null
          echo "Environment=\"Jwt__Audience=${{ secrets.PROD_JWT_AUDIENCE }}\"" | sudo tee -a $OVERRIDE_FILE > /dev/null
          
          # Storage & Email đã được cấu hình
          
          # Cloudinary Configuration (Image Storage)
          echo "Environment=\"Cloudinary__CloudName=${{ secrets.CLOUDINARY_CLOUD_NAME }}\"" | sudo tee -a $OVERRIDE_FILE > /dev/null
          echo "Environment=\"Cloudinary__ApiKey=${{ secrets.CLOUDINARY_API_KEY }}\"" | sudo tee -a $OVERRIDE_FILE > /dev/null
          echo "Environment=\"Cloudinary__ApiSecret=${{ secrets.CLOUDINARY_API_SECRET }}\"" | sudo tee -a $OVERRIDE_FILE > /dev/null
          
          # DialogFlow Configuration
          echo "Environment=\"DialogFlow__ProjectId=${{ secrets.DIALOGFLOW_PROJECT_ID }}\"" | sudo tee -a $OVERRIDE_FILE > /dev/null
          echo "Environment=\"DialogFlow__JsonPath=${{ secrets.DIALOGFLOW_JSON_PATH }}\"" | sudo tee -a $OVERRIDE_FILE > /dev/null
          echo "Environment=\"GOOGLE_APPLICATION_CREDENTIALS=${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}\"" | sudo tee -a $OVERRIDE_FILE > /dev/null

          echo "Reloading systemd daemon and restarting service..."
          sudo systemctl daemon-reload
          sudo systemctl restart ${SERVICE_NAME}

          echo "Backing up existing Nginx configuration..."
          sudo mkdir -p /etc/nginx/sites-available/backup
          timestamp=$(date +%Y%m%d_%H%M%S)
          if [ -f /etc/nginx/sites-available/working.conf ]; then
            sudo cp /etc/nginx/sites-available/working.conf "/etc/nginx/sites-available/backup/working.conf.$timestamp"
          fi

          echo "Updating Nginx configuration..."
          # Copy new config
          sudo cp /home/${{ secrets.EC2_USER }}/app/nginx/working.conf /etc/nginx/sites-available/

          # Remove existing symlink if it exists
          sudo rm -f /etc/nginx/sites-enabled/working.conf
          
          # Create new symlink
          sudo ln -sf /etc/nginx/sites-available/working.conf /etc/nginx/sites-enabled/

          # Test nginx configuration
          echo "Testing Nginx configuration..."
          if sudo nginx -t; then
            echo "Nginx configuration test passed. Reloading Nginx..."
            sudo systemctl reload nginx
          else
            echo "Nginx configuration test failed. Rolling back to previous config..."
            if [ -f "/etc/nginx/sites-available/backup/working.conf.$timestamp" ]; then
              sudo cp "/etc/nginx/sites-available/backup/working.conf.$timestamp" /etc/nginx/sites-available/working.conf
              sudo systemctl reload nginx
            fi
            exit 1
          fi

          echo "Checking Nginx Configuration Status..."
          echo "----------------------------------------"
          echo "1. Current Nginx Sites Available:"
          ls -la /etc/nginx/sites-available/
          echo "----------------------------------------"
          echo "2. Current Nginx Sites Enabled:"
          ls -la /etc/nginx/sites-enabled/
          echo "----------------------------------------"
          echo "3. Nginx Service Status:"
          sudo systemctl status nginx --no-pager
          echo "----------------------------------------"
          echo "4. Checking Directory Contents and Permissions:"
          echo "Frontend files in /var/www/html/:"
          ls -la /var/www/html/
          echo "----------------------------------------"
          echo "Backend files in /home/${{ secrets.EC2_USER }}/app/backend/:"
          ls -la /home/${{ secrets.EC2_USER }}/app/backend/
          echo "----------------------------------------"
          
          echo "5. Nginx Configuration Test:"
          sudo nginx -t
          echo "----------------------------------------"
          
          echo "6. Current Nginx Configuration:"
          sudo nginx -T
          echo "----------------------------------------"
          
          echo "7. Checking Ports and Services:"
          echo "Nginx ports:"
          sudo netstat -tlpn | grep nginx
          echo "Backend service ports:"
          sudo netstat -tlpn | grep dotnet
          echo "----------------------------------------"
          
          echo "8. Checking Logs:"
          echo "Nginx error log:"
          sudo tail -n 50 /var/log/nginx/error.log
          echo "----------------------------------------"
          echo "Nginx access log:"
          sudo tail -n 50 /var/log/nginx/access.log
          echo "----------------------------------------"

          echo "✅ Deployment done!"
          echo "Để xác minh biến môi trường, SSH vào server và chạy: sudo systemctl show ${SERVICE_NAME} --property=Environment"

# ---------- VERIFY DEPLOYMENT & RESTART SERVICE ----------
    - name: 🚨 Verify Backend Deployment & Force Restart
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.EC2_IP }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          echo "============= BACKEND DEPLOYMENT VERIFICATION ============="
          SERVICE_NAME="xyz-backend.service" # << THAY ĐỔI: Tên service của bạn
          
          # Kiểm tra file Program.cs được deploy
          PROGRAM_CS="/home/${{ secrets.EC2_USER }}/app/backend/publish/Program.cs"
          if [ -f "$PROGRAM_CS" ]; then
            echo "✅ Program.cs found in publish directory"
          else
            echo "⚠️ Program.cs not found in publish directory (normal for published app)"
          fi
          
          echo "Checking for PendingModelChanges handling code in published DLL"
          strings /home/${{ secrets.EC2_USER }}/app/backend/publish/Backend.Api.dll | grep -i "PendingModelChanges" || echo "String not found"
          strings /home/${{ secrets.EC2_USER }}/app/backend/publish/Backend.Api.dll | grep -i "application will continue" || echo "String not found"
          
          echo "Stopping and starting service to ensure clean state..."
          sudo systemctl stop ${SERVICE_NAME}
          echo "Service stopped. Waiting 5 seconds..."
          sleep 5
          
          echo "Starting service..."
          sudo systemctl start ${SERVICE_NAME}
          sleep 5
          
          echo "Checking service status..."
          sudo systemctl status ${SERVICE_NAME} --no-pager
          
          echo "Tailing application logs..."
          sudo journalctl -u ${SERVICE_NAME} -n 50 --no-pager
          
          echo "============= VERIFICATION COMPLETE ============="
